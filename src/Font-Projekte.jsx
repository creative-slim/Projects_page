/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/Font-Projekte.glb --transform 
Files: ./public/models/Font-Projekte.glb [1.46MB] > /Users/slim-cd/Documents/_Projects/__Creative Directors Website/website 2025/Projects_page/Font-Projekte-transformed.glb [105.52KB] (93%)
*/

import React from 'react'
import { useFrame } from '@react-three/fiber'
import { useHelper } from '@react-three/drei'
import * as THREE from 'three'
import { Color } from 'three'
import { useModelLoader, preloadModel } from './utils/ModelLoader'

// Define model URLs
const localModelUrl = "/models/Font-Projekte-transformed.glb";
const remoteModelUrl = "https://files.creative-directors.com/creative-website/creative25/glbs/Font-Projekte-transformed.glb";

export function ProjekteText(props) {
  const { nodes, materials } = useModelLoader(localModelUrl, remoteModelUrl);

  const pointLightRef = React.useRef();
  const directionalLightRef = React.useRef();
  const targetRef = React.useRef();

  // Enable both helpers to visualize the light and target
  // useHelper(directionalLightRef, THREE.DirectionalLightHelper, 1, new Color(0xff0000));
  // useHelper(targetRef, THREE.AxesHelper, 1);

  useFrame(() => {
    if (pointLightRef.current) {
      const time = Date.now() * 0.001;
      const noiseX = Math.sin(time * 0.7) * 0.5 + Math.sin(time * 1.3) * 0.3;
      const noiseZ = Math.cos(time * 0.5) * 0.4 + Math.cos(time * 1.1) * 0.2;

      pointLightRef.current.position.x = 5 + Math.sin(time * .6) * 5 + noiseX;
      pointLightRef.current.position.z = Math.cos(time) * 0.6 + noiseZ;
      pointLightRef.current.position.y = Math.sin(time * 0.3) * 0.2;
    }

    // Update directional light target position
    if (targetRef.current && directionalLightRef.current) {
      // targetRef.current.position.set(0, 10, 10);
      directionalLightRef.current.target = targetRef.current;
    }
  });

  return (
    <group {...props} dispose={null}>
      <pointLight
        ref={pointLightRef}
        position={[5, 0, 0]}
        intensity={4}
        color={"#ffffff"}
      />
      <directionalLight
        position={[-1, 1, .7]}
        intensity={5}
        ref={directionalLightRef}
      />
      <object3D ref={targetRef} position={[0, 0, 0]} />
      <mesh geometry={nodes.Text_projekte.geometry} material={materials.White} position={[0, -0.021, 0]} />
      <mesh geometry={nodes.Bevel.geometry} material={materials['Material.001']} position={[0, -0.142, 0]} />
    </group>
  )
}

// Preload the model
preloadModel(localModelUrl, remoteModelUrl);
