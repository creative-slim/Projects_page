/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/site-headings.glb 
*/

import React from "react";
import { useGLTF, useHelper } from "@react-three/drei";
import { Color, MeshBasicMaterial, ShaderMaterial } from "three";
import { useEffect } from "react";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";

// Determine the model URL based on the environment
const isDevelopment = import.meta.env.DEV;
const localModelUrl = "/models/site-headings.glb";
const remoteModelUrl =
  "https://files.creative-directors.com/creative-website/creative25/glbs/site-headings.glb"; // Corrected remote URL if needed
const modelUrl = isDevelopment ? localModelUrl : remoteModelUrl;

export function Heading(props) {
  const { nodes, materials } = useGLTF(modelUrl);
  // materials.blau = new MeshBasicMaterial({
  //   color: new Color(0.5, 0.4, 11), // Exaggerated #F4E7D7
  //   // color: new Color("#F4E7D7"), // Exaggerated #F4E7D7
  //   toneMapped: false,
  // });

  const pointLightRef = React.useRef();
  const directionalLightRef = React.useRef();
  const TextRef = React.useRef();

  // useHelper(pointLightRef, THREE.PointLightHelper, 1, new Color(0xff0000));
  // useHelper(
  //   directionalLightRef,
  //   THREE.DirectionalLightHelper,
  //   1,
  //   new Color(0xff0000)
  // );

  useFrame(() => {
    // if (pointLightRef.current) {
    //   // pointLightRef.current.intensity = Math.sin(Date.now() * 0.001) * 50 + 50;
    // }
    // make the light rotate around the center of the model
    if (pointLightRef.current) {
      const time = Date.now() * 0.001;
      const noiseX = Math.sin(time * 0.7) * 0.5 + Math.sin(time * 1.3) * 0.3;
      const noiseZ = Math.cos(time * 0.5) * 0.4 + Math.cos(time * 1.1) * 0.2;

      pointLightRef.current.position.x = Math.sin(time) * 2 + noiseX;
      pointLightRef.current.position.z = Math.cos(time) * 0.6 + noiseZ;

      // Add subtle y-axis movement
      pointLightRef.current.position.y = Math.sin(time * 0.3) * 0.2;
    }
  });

  return (
    <group {...props} dispose={null}>
      {/* <directionalLight
        ref={directionalLightRef}
        scale={[1, 1, 1]}
        position={[0, 2, 1.1]}
        target={TextRef.current}
        intensity={2}
        color={"#ffffff"}
        castShadow
      /> */}
      <pointLight
        ref={pointLightRef}
        position={[0, 0, 1]}
        intensity={5}
        color={"#ffffff"}
      />
      <group ref={TextRef} position={[0, 0, 0]}>
        <mesh
          geometry={nodes.Text008.geometry}
          material={materials.blau}
          position={[1.963, -0.031, -0.366]}
          scale={[1, 0.423, 1]}
        />
        <mesh
          geometry={nodes.Text009.geometry}
          material={materials.weiß}
          position={[-1.388, -0.025, -0.386]}
          scale={[1, 0.423, 1]}
        />
        <mesh
          geometry={nodes.Text011.geometry}
          material={materials.weiß}
          position={[1.951, -0.013, -0.366]}
          scale={[1, 0.423, 1]}
        />
        <mesh
          geometry={nodes.Text044.geometry}
          material={materials.blau}
          position={[1.443, -0.031, -0.474]}
          scale={[1, 0.423, 1]}
        />
        <mesh
          geometry={nodes.Text045.geometry}
          material={materials.blau}
          position={[0.792, -0.031, -0.369]}
          scale={[1, 0.423, 1]}
        />
        <mesh
          geometry={nodes.Text046.geometry}
          material={materials.blau}
          position={[0.256, -0.031, -0.366]}
          scale={[1, 0.423, 1]}
        />
        <mesh
          geometry={nodes.Text047.geometry}
          material={materials.blau}
          position={[-0.187, -0.031, -0.305]}
          scale={[1, 0.423, 1]}
        />
        <mesh
          geometry={nodes.Text048.geometry}
          material={materials.blau}
          position={[-0.784, -0.031, -0.363]}
          scale={[1, 0.423, 1]}
        />
        <mesh
          geometry={nodes.Text050.geometry}
          material={materials.blau}
          position={[-1.98, -0.031, -0.421]}
          scale={[1, 0.423, 1]}
        />
        <mesh
          geometry={nodes.Text067.geometry}
          material={materials.weiß}
          position={[1.443, -0.013, -0.48]}
          scale={[1, 0.423, 1]}
        />
        <mesh
          geometry={nodes.Text068.geometry}
          material={materials.weiß}
          position={[0.782, -0.013, -0.368]}
          scale={[1, 0.423, 1]}
        />
        <mesh
          geometry={nodes.Text069.geometry}
          material={materials.weiß}
          position={[0.244, -0.013, -0.366]}
          scale={[1, 0.423, 1]}
        />
        <mesh
          geometry={nodes.Text070.geometry}
          material={materials.weiß}
          position={[-0.184, -0.013, -0.297]}
          scale={[1, 0.423, 1]}
        />
        <mesh
          geometry={nodes.Text071.geometry}
          material={materials.weiß}
          position={[-0.784, -0.013, -0.363]}
          scale={[1, 0.423, 1]}
        />
        <mesh
          geometry={nodes.Text073.geometry}
          material={materials.weiß}
          position={[-1.979, -0.013, -0.425]}
          scale={[1, 0.423, 1]}
        />
        <mesh
          geometry={nodes.Text074.geometry}
          material={materials.blau}
          position={[-1.383, -0.044, -0.377]}
          scale={[1, 0.423, 1]}
        />
      </group>
    </group>
  );
}

useGLTF.preload(modelUrl);
